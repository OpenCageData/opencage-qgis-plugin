# -*- coding: utf-8 -*-

"""
/***************************************************************************
 OpenCageProcessing
                                 A QGIS plugin
 Geocoding using the OpenCage API
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-01-11
        copyright            : (C) 2023 by ByteRoad
        email                : info@byteroad.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'doublebyte'
__date__ = '2023-01-11'
__copyright__ = '(C) 2023 by opencage'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterEnum,
                       QgsSettings,
                       QgsField,
                       QgsFields,
                       QgsWkbTypes,
                       QgsCoordinateReferenceSystem,
                       QgsFeature,
                       QgsPoint,
                       QgsProcessingParameterDefinition,
                       QgsProcessingException,
                       QgsProcessingParameterExtent,
                       QgsCoordinateTransform,
                       QgsProject,
                       QgsProcessingParameterFeatureSink)

from .QgsOpenCageGeocoder import QgsOpenCageGeocoder

import csv

import logging
logging.basicConfig(filename='/tmp/opencage.log', encoding='utf-8', level=logging.DEBUG)

class ReverseGeocode(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT = 'INPUT'
    ABBRV = 'Abbreviated?'
    NO_ANNOTATIONS = 'No annotations'
    NO_RECORD = 'No record'
    LANGUAGE = 'Language'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.setupLanguages()

        # We add the input vector features source. It can have any kind of
        # geometry.

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Point Layer (results will be added as attributes)'),
                [QgsProcessing.TypeVectorPoint] # accepts any geometry
            )
        )

        # Set advanced parameters
        # TODO: add address_only

        abbrvPar = QgsProcessingParameterBoolean(
            self.ABBRV, self.tr('Attempt to abbreviate and shorten the returned address (on the "formatted" field)'), defaultValue=False)
        
        noAnnotationsPar = QgsProcessingParameterBoolean(
            self.NO_ANNOTATIONS, self.tr('Additional information about the result location (e.g.: extra fields). Switch off for faster response!'), defaultValue=False)
    
        noRecordPar = QgsProcessingParameterBoolean(
            self.NO_RECORD, self.tr('Privacy mode: do not log query contents. It may limit customer support.'), defaultValue=False)

        # Codes/names from here: https://en.wikipedia.org/wiki/IETF_language_tag
        # (List of common primary language subtags)
        langPar = QgsProcessingParameterEnum(
                self.LANGUAGE,
                self.tr('Format results in this language, if possible'),
                options=self.getLanguageStrings(),
                defaultValue=0,
                optional=False)
        
        abbrvPar.setFlags(abbrvPar.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(abbrvPar)

        noAnnotationsPar.setFlags(noAnnotationsPar.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(noAnnotationsPar)
    
        noRecordPar.setFlags(noRecordPar.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(noRecordPar)

        langPar.setFlags(langPar.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(langPar)

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        abbreviation = 1 if self.parameterAsBool(parameters, self.ABBRV, context) == True else 0
        no_annotations = 0 if self.parameterAsBool(parameters, self.NO_ANNOTATIONS, context) == True else 1
        no_record = 1 if self.parameterAsBool(parameters, self.NO_RECORD, context) == True else 0

        lang_idx= self.parameterAsInt(parameters, self.LANGUAGE, context)
        language = self.parseLanguage(lang_idx)

        settings = QgsSettings()
        self.api_key = settings.value('/plugins/opencage/api_key', '', str)

        geocoder = QgsOpenCageGeocoder(self.api_key, no_annotations)

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)

        crs = QgsCoordinateReferenceSystem("EPSG:4326")
        (sink, dest_id) = self.parameterAsSink(parameters, self.INPUT,
                context, geocoder.appendedFields(), QgsWkbTypes.Point , crs)

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        features = source.getFeatures()

        try:
            # Make sure geometries are in WGS84
            xform = QgsCoordinateTransform(source.sourceCrs(),
                                    QgsCoordinateReferenceSystem("EPSG:4326"),
                                      QgsProject.instance())

            for current, feature in enumerate(features):
                # Stop the algorithm if cancel button has been clicked
                if feedback.isCanceled():
                    break

                geom = feature.geometry()
                res = geom.transform(xform)
                if res != 0:
                    raise QgsProcessingException
                lat = geom.asPoint().y()
                lng = geom.asPoint().x()
                
                geocoder.reverse(feature, lat, lng, abbreviation, no_annotations, 
                                               no_record, language, 
                                               context, feedback)

                # Update the progress bar
                feedback.setProgress(int(current * total))

            return {self.INPUT: dest_id}
    
        except Exception as e:
            feedback.reportError("Error: {}".format(e), True)
            raise QgsProcessingException

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'r_geocode'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return 'Geocode coordinates'

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        # return self.tr(self.groupId())
        return None

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return None

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ReverseGeocode()

    def shortHelpString(self):
        """
        Returns a localised short help string for the algorithm.
        """
        return self.tr('Turn point geometries into human understandable place names or addresses. This process is also known as <b>reverse geocoding</b>. Read more about this topic in the <a href="https://opencagedata.com/faq">OpenCage FAQ</a>.')
    
    def helpString(self):
        """
        Returns a localised help string for the algorithm.
        """
        return self.tr('Geocoding coordinates')
    
    def helpUrl(self):
            return "https://opencagedata.com/api"
    

    def parseLanguage(self, lang):

        SubCodes= [
                    "native",
                    "af",
                    "am",
                    "ar",
                    "arn",
                    "as",
                    "az",
                    "ba",
                    "be",
                    "bg",
                    "bn",
                    "bo",
                    "br",
                    "bs",
                    "ca",
                    "co",
                    "cs",
                    "cy",
                    "da",
                    "de",
                    "dsb",
                    "dv",
                    "el",
                    "en",
                    "es",
                    "et",
                    "eu",
                    "fa",
                    "fi",
                    "fil",
                    "fo",
                    "fr",
                    "fy",
                    "ga",
                    "gd",
                    "gl",
                    "gsw",
                    "gu",
                    "ha",
                    "he",
                    "hi",
                    "hr",
                    "hsb",
                    "hu",
                    "hy",
                    "id",
                    "ig",
                    "ii",
                    "is",
                    "it",
                    "iu",
                    "ja",
                    "ka",
                    "kk",
                    "kl",
                    "km",
                    "kn",
                    "ko",
                    "kok",
                    "ky",
                    "lb",
                    "lo",
                    "lt",
                    "lv",
                    "mi",
                    "mk",
                    "ml",
                    "mn",
                    "moh",
                    "mr",
                    "ms",
                    "mt",
                    "my",
                    "nb",
                    "ne",
                    "nl",
                    "nn",
                    "no",
                    "st",
                    "oc",
                    "or",
                    "pa",
                    "pl",
                    "prs",
                    "ps",
                    "pt",
                    "quc",
                    "qu",
                    "rm",
                    "ro",
                    "ru",
                    "rw",
                    "sa",
                    "sah",
                    "se",
                    "si",
                    "sk",
                    "sl",
                    "sma",
                    "smj",
                    "smn",
                    "sms",
                    "sq",
                    "sr",
                    "sv",
                    "sw",
                    "syc",
                    "ta",
                    "te",
                    "tg",
                    "th",
                    "tk",
                    "tn",
                    "tr",
                    "tt",
                    "tzm",
                    "ug",
                    "uk",
                    "ur",
                    "uz",
                    "vi",
                    "wo",
                    "xh",
                    "yo",
                    "zh",
                    "zu",
        ]

        return SubCodes[lang]

    def setupLanguages(self):

        self.languages = [self.tr('native'),
                            self.tr("Afrikaans"),
                            self.tr("Amharic"),
                            self.tr("Arabic"),
                            self.tr("Mapudungun"),
                            self.tr("Assamese"),
                            self.tr("Azerbaijani"),
                            self.tr("Bashkir"),
                            self.tr("Belarusian"),
                            self.tr("Bulgarian"),
                            self.tr("Bengali"),
                            self.tr("Tibetan"),
                            self.tr("Breton"),
                            self.tr("Bosnian"),
                            self.tr("Catalan"),
                            self.tr("Corsican"),
                            self.tr("Czech"),
                            self.tr("Welsh"),
                            self.tr("Danish"),
                            self.tr("German"),
                            self.tr("Lower Sorbian"),
                            self.tr("Divehi"),
                            self.tr("Greek"),
                            self.tr("English"),
                            self.tr("Spanish"),
                            self.tr("Estonian"),
                            self.tr("Basque"),
                            self.tr("Persian"),
                            self.tr("Finnish"),
                            self.tr("Filipino"),
                            self.tr("Faroese"),
                            self.tr("French"),
                            self.tr("Frisian"),
                            self.tr("Irish"),
                            self.tr("Scottish Gaelic"),
                            self.tr("Galician"),
                            self.tr("Alsatian"),
                            self.tr("Gujarati"),
                            self.tr("Hausa"),
                            self.tr("Hebrew"),
                            self.tr("Hindi"),
                            self.tr("Croatian"),
                            self.tr("Upper Sorbian"),
                            self.tr("Hungarian"),
                            self.tr("Armenian"),
                            self.tr("Indonesian"),
                            self.tr("Igbo"),
                            self.tr("Yi"),
                            self.tr("Icelandic"),
                            self.tr("Italian"),
                            self.tr("Inuktitut"),
                            self.tr("Japanese"),
                            self.tr("Georgian"),
                            self.tr("Kazakh"),
                            self.tr("Greenlandic"),
                            self.tr("Khmer"),
                            self.tr("Kannada"),
                            self.tr("Korean"),
                            self.tr("Konkani"),
                            self.tr("Kyrgyz"),
                            self.tr("Luxembourgish"),
                            self.tr("Lao"),
                            self.tr("Lithuanian"),
                            self.tr("Latvian"),
                            self.tr("Maori"),
                            self.tr("Macedonian"),
                            self.tr("Malayalam"),
                            self.tr("Mongolian"),
                            self.tr("Mohawk"),
                            self.tr("Marathi"),
                            self.tr("Malay"),
                            self.tr("Maltese"),
                            self.tr("Burmese"),
                            self.tr("Norwegian (Bokmål)"),
                            self.tr("Nepali"),
                            self.tr("Dutch"),
                            self.tr("Norwegian (Nynorsk)"),
                            self.tr("Norwegian"),
                            self.tr("Sesotho"),
                            self.tr("Occitan"),
                            self.tr("Odia"),
                            self.tr("Punjabi"),
                            self.tr("Polish"),
                            self.tr("Dari"),
                            self.tr("Pashto"),
                            self.tr("Portuguese"),
                            self.tr("K'iche"),
                            self.tr("Quechua"),
                            self.tr("Romansh"),
                            self.tr("Romanian"),
                            self.tr("Russian"),
                            self.tr("Kinyarwanda"),
                            self.tr("Sanskrit"),
                            self.tr("Yakut"),
                            self.tr("Sami (Northern)"),
                            self.tr("Sinhala"),
                            self.tr("Slovak"),
                            self.tr("Slovenian"),
                            self.tr("Sami (Southern)"),
                            self.tr("Sami (Lule)"),
                            self.tr("Sami (Inari)"),
                            self.tr("Sami (Skolt)"),
                            self.tr("Albanian"),
                            self.tr("Serbian"),
                            self.tr("Swedish"),
                            self.tr("Kiswahili"),
                            self.tr("Syriac"),
                            self.tr("Tamil"),
                            self.tr("Telugu"),
                            self.tr("Tajik"),
                            self.tr("Thai"),
                            self.tr("Turkmen"),
                            self.tr("Tswana"),
                            self.tr("Turkish"),
                            self.tr("Tatar"),
                            self.tr("Tamazight"),
                            self.tr("Uyghur"),
                            self.tr("Ukrainian"),
                            self.tr("Urdu"),
                            self.tr("Uzbek"),
                            self.tr("Vietnamese"),
                            self.tr("Wolof"),
                            self.tr("Xhosa"),
                            self.tr("Yoruba"),
                            self.tr("Chinese"),
                            self.tr("Zulu")
                         ]
        
    def getLanguageStrings(self):

        outputList = []

        for i in range(len(self.languages)):
            # logging.debug('{0} - {1}'.format(self.parseLanguage(i), self.languages[i]))
            outputList.append('{0} - {1}'.format(self.parseLanguage(i), self.languages[i]))

        return outputList
    
